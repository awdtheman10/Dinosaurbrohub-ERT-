_G.autoTap = false
_G.autoRebirth = false
_G.buyEgg = false
_G.zombieDamage = false
local remotePath = game:GetService("ReplicatedStorage").Aero.AeroRemoteServices

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Clicker Madness",
   LoadingTitle = "It is time to be OP",
   LoadingSubtitle = "by Dinosaurbro",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})
local Tab = Window:CreateTab("Auto farms", 4483362458) -- Title, Image
local Teleports = Window:CreateTab("Teleports", 4483362458) -- Title, Image
local Toggle = Tab:CreateToggle({
   Name = "autoClick (AMPLIFIED)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   _G.autoTap = Value
   spawn(function()
while _G.autoTap == true do
	   local args = {[1] = 999999999999999999}
	   remotePath:WaitForChild("ClickService"):WaitForChild("Click"):FireServer(unpack(args))
	   wait()
end
end)-- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "auto buy eggs (OP)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   _G.autoEgg = Value
   spawn(function()
      while _G.autoEgg == true do
      local args = {[1] = "basic"}     
      game:GetService("ReplicatedStorage"):WaitForChild("Aero"):WaitForChild("AeroRemoteServices"):WaitForChild("EggService"):WaitForChild("Purchase"):FireServer('basic')
      wait()
   end
   end
)
-- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})
local Toggle = Tab:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   _G.autoRebirth = Value
   spawn(function()
   while _G.autoRebirth == true do
         local args = {[1] = 1000}
         remotePath:WaitForChild("RebirthService").BuyRebirths:FireServer(unpack(args))
         wait()
      end  
end)-- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})



local Button = Teleports:CreateButton({
    Name = "Teleport to desert",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Assuming HumanoidRootPart is the root part of the character

        -- Create a new CFrame and set it to the character's HumanoidRootPart
        local newCFrame = CFrame.new(2288.66113, 7.36253929, 1087.66602)
        humanoidRootPart.CFrame = newCFrame
    end,
})


local Button = Teleports:CreateButton({
    Name = "Teleport to lava",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Assuming HumanoidRootPart is the root part of the character

        -- Create a new CFrame and set it to the character's HumanoidRootPart
        local newCFrame = CFrame.new(-1690.38525, 7.77716637, -734.648865, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        humanoidRootPart.CFrame = newCFrame
    end,
})


local Button = Teleports:CreateButton({
    Name = "Teleport to Ocean",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Assuming HumanoidRootPart is the root part of the character

        -- Create a new CFrame and set it to the character's HumanoidRootPart
        local newCFrame = CFrame.new(-258.018005, 9.72535324, 2065.25439, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        humanoidRootPart.CFrame = newCFrame
    end,
})


local Button = Teleports:CreateButton({
    Name = "Teleport to Winter",
    Callback = function()
        local player = game.Players.LocalPlayer
        local character = player.Character
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart") -- Assuming HumanoidRootPart is the root part of the character

        -- Create a new CFrame and set it to the character's HumanoidRootPart
        local newCFrame = CFrame.new(-2195.28003, 6.46062994, 409.998016, 1, 0, 0, 0, 1, 0, 0, 0, 1)
        humanoidRootPart.CFrame = newCFrame
    end,
})



print('hello there fellow exploiter')


local Toggle = Tab:CreateToggle({
   Name = "Damage Zombie Boss",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   _G.zombieDamage = Value
   while _G.zombieDamage == true do
   local args = {[1] = "Zombie"}
game:GetService("ReplicatedStorage"):WaitForChild("Aero"):WaitForChild("AeroRemoteServices"):WaitForChild("CursorCannonService"):WaitForChild("FireBoss"):FireServer(unpack(args))
wait(0.0001)
end
 end
})
