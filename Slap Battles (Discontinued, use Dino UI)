getgenv().slapAura = false

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
 
local Window = Rayfield:CreateWindow({
  Name = "Slap Battles Beta",
  LoadingTitle = "Loading Features....",
  LoadingSubtitle = "Hang on!",
  ConfigurationSaving = {
     Enabled = false,
     FolderName = nil, -- Create a custom folder for your hub/game
     FileName = nil
  },
  Discord = {
     Enabled = false,
     Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
     RememberJoins = true -- Set this to false to make them join the discord every time they load it up
  },
  KeySystem = false, -- Set this to true to use our key system
  KeySettings = {
     Title = "Untitled",
     Subtitle = "Key System",
     Note = "No method of obtaining the key is provided",
     FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
     SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
     GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
     Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
  }
})

local MainTab = Window:CreateTab("Slap Battles BETA", 4483362458) -- Title, Image






   





    local Toggle = MainTab:CreateToggle({
    Name = "Rhythm Aura",
    CurrentValue = false,
    Flag = "spamExplode", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
            spamExplode = bool
                if spamExplode then
                    while spamExplode and task.wait(.01) do
                        game:GetService("ReplicatedStorage"):WaitForChild("rhythmevent"):FireServer("AoeExplosion", 86)
                    end
                end end})
 
        -- The function that takes place when the toggle is pressed
    -- The variable (Value) is a boolean on whether the toggle is true or false










local Toggle = MainTab:CreateToggle({
    Name = "Anti Ragdoll",
    CurrentValue = false,
    Flag = "Slap Aura", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(bool)
        antiRagdoll = bool
            if bool == true then
                game.Players.LocalPlayer.Character.Humanoid.Health = 0
                task.wait()
                game.Players.LocalPlayer.CharacterAdded:Connect(function(Character)
                    task.wait()
                    Character:WaitForChild("Ragdolled").Changed:Connect(function()
                        if Character:WaitForChild("Ragdolled").Value == true and antiRagdoll == true then
                            repeat task.wait()
                                Character.Torso.Anchored = true
                            until Character:FindFirstChild("Torso") == nil or Character:WaitForChild("Ragdolled").Value == false
                            ----------------------------------------------------------------------------------------------------
                            Character.Torso.Anchored = false
                        end
                    end)
                end) end
            end})

    




    local Toggle = MainTab:CreateToggle({
        Name = "Walk On Cum",
        CurrentValue = false,
        Flag = "noVoid", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(noVoid)
            if noVoid == true then
                for i,v in pairs(game.Workspace:GetDescendants()) do
                    if v.Name == "dedBarrier"  or v.Name == "ArenaBarrier" or v.Name == "DEATHBARRIER" or v.Name == "DEATHBARRIER2" then               
                        v.CanCollide = true
                        v.Material = "Marble"
                        v.Color = Color3.new(1,1,1)
                        v.Transparency = 0.1
                    end  
                end 
            else
                for i,v in pairs(game.Workspace:GetDescendants()) do
                    if v.Name == "dedBarrier"  or v.Name == "ArenaBarrier" or v.Name == "DEATHBARRIER" or v.Name == "DEATHBARRIER2" then               
                        v.CanCollide = false
                        v.Transparency = 1
                    end  
                end
            end end
        })
        
        
        
    
    

                    
                    
                    
 
            



                        
                            

                         local Slider = MainTab:CreateSlider({
                            Name = "WalkSpeed",
                            Range = {16, 700},
                            Increment = 0.1,
                            Suffix = "Walkspeed",
                            CurrentValue = 16,
                            Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
                            Callback = function(v)
                                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
                                           
                                                            end})
                                           
                                    
    

                                
                            -- The function that takes place when the button is pressed

        
        
        

                        
                        
                        
    local Toggle = MainTab:CreateToggle({
        Name = "free slaps",
        CurrentValue = false,
        Flag = "free slaps", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
        Callback = function(bool)
            slappleFarm = bool
            if bool == true then
                while slappleFarm do
                    wait(.001)
                    for Index, Instance in next, workspace.Arena.island5.Slapples:GetDescendants() do
                        if Instance.ClassName == "TouchTransmitter" then
                            firetouchinterest(game.Players.LocalPlayer.Character.Head, Instance.Parent, 0)
                            firetouchinterest(game.Players.LocalPlayer.Character.Head, Instance.Parent, 1)
                        end
                    end
                end
            end
            
                    end})
                    local Button = MainTab:CreateButton({
                        Name = "Spawn Nulls",
                        Callback = function()
                            
                                game:GetService("ReplicatedStorage").NullAbility:FireServer()
                            task.wait()
                        end})-- The function that takes place when the button is pressed
                        
                     

                    nullSpam = bool
	   
   
    
        
  local targetPlayer = game.Players.LocalPlayer
local numberOfChecks = 5

for i = 1, numberOfChecks do
    if targetPlayer and targetPlayer.Parent then
        if not game:IsLoaded() then
        
    game.Loaded:Wait()
        end 
end
                local bypass;
                bypass = hookmetamethod(game, "__namecall", function(method, ...) 
                    if getnamecallmethod() == "FireServer" and method == game.ReplicatedStorage.Ban then
                        return
                    elseif getnamecallmethod() == "FireServer" and method == game.ReplicatedStorage.AdminGUI then
                        return
                    elseif getnamecallmethod() == "FireServer" and method == game.ReplicatedStorage.WalkSpeedChanged then
                        return
                    end
                    return bypass(method, ...)
                end) 
                if setfpscap then 
                    setfpscap(12569)-- Run your code here when the player is found
        print("Player found! Bypass active.")
        break
    end
    wait(1)
end


local Button = MainTab:CreateButton({
    Name = "Get Tycoon",
    Callback = function()
        if not game:GetService("BadgeService"):UserHasBadgeAsync(game.Players.LocalPlayer.UserId, 2129212145) then
            if game.Players.LocalPlayer.Character:FindFirstChild("entered") == nil then    
                repeat task.wait(.5)   
                    firetouchinterest(game.Players.LocalPlayer.Character:FindFirstChild("Head"), workspace.Lobby.Teleport1.TouchInterest.Parent, 0)
                    firetouchinterest(game.Players.LocalPlayer.Character:FindFirstChild("Head"), workspace.Lobby.Teleport1.TouchInterest.Parent, 1)          
                until game.Players.LocalPlayer.Character:FindFirstChild("entered") 
            end
            task.wait()
            repeat task.wait(.5)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Arena.Plate.CFrame * CFrame.new(0,-2,0)   
            until game:GetService("BadgeService"):UserHasBadgeAsync(game.Players.LocalPlayer.UserId, 2129212145) 
            -----------------------------------------------------------------------------------------------------------------------
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Arena.Plate.CFrame * CFrame.new(0,2,0)
        end
        end})
        -- The function that takes place when the button is pressed



